#+TITLE: Emacs main =init.el= file for netbook
#+PROPERTY: header-args:emacs-lisp :tangle ./export/emacs-init-netbook.el :comments yes

* Personal constants

#+begin_src emacs-lisp

  (defconst SAVES_DIR
    "/mnt/data/misc/file-saves")

  (defconst YAS_SNIPPET_DIR
    "/mnt/data/projects/yas-snippets")

#+end_src

* Global Emacs configuration

Next code does not rely on any external packages.
 
** Global modes

#+begin_src emacs-lisp

  (column-number-mode)
  (scroll-bar-mode -1)        ; Disable visible scrollbar.
  (tool-bar-mode -1)          ; Disable the toolbar.
  (tooltip-mode -1)           ; Disable tooltips.
  (set-fringe-mode 10)        ; Give some breathing room ???.
  (menu-bar-mode -1)          ; Disable menu bar.
  (setq visible-bell t)       ; Do not beep.
  (recentf-mode t)            ; Store history of recent files.

  (global-auto-revert-mode 1) ; Watch files for changes.
  (setq global-auto-revert-non-file-buffers t) ; For, e.g., Dired.

  (add-hook 'prog-mode-hook 'display-line-numbers-mode)

  (global-subword-mode)      ; Yes! Hop in Open|Ai|Embeddings like open_ai_embeddings.

#+end_src

** Main font                                                       :noexport:

#+begin_src emacs-lisp

  (set-face-attribute
   'default
   nil
   :font "JetBrains Mono"
   :height 98
   :weight 'regular
   :slant 'normal
   :width 'normal)

#+end_src

** Backups

Taken from: [[https://stackoverflow.com/a/151946]].

#+begin_src emacs-lisp

  (setq backup-directory-alist `(("." . ,SAVES_DIR)))
  (setq backup-by-copying t)

  (setq delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        version-control t)

#+end_src

* Packages

** Package setup

#+begin_src emacs-lisp

  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))

#+end_src

** =use-package=

#+begin_src emacs-lisp

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

** Multi-term

Several terminals. Taken from: [[https://www.emacswiki.org/emacs/MultiTerm]].

#+begin_src emacs-lisp

  (use-package multi-term
    :custom
    (multi-term-program "/bin/zsh"))

#+end_src

** Copy/pasting

#+begin_src emacs-lisp

  (use-package xclip
    :config
    (xclip-mode 1))

#+end_src

** Flycheck

#+begin_src emacs-lisp

  (use-package flycheck)

#+end_src

** LSP

#+begin_src emacs-lisp

  (use-package lsp-mode
    :commands lsp
    :custom
    ;; what to use when checking on-save. "check" is default, I prefer clippy
    (lsp-rust-analyzer-cargo-watch-command "clippy")
    (lsp-eldoc-render-all t)
    (lsp-idle-delay 0.6)
    ;; enable / disable the hints as you prefer:
    (lsp-inlay-hint-enable t)
    ;; These are optional configurations. See https://emacs-lsp.github.io/lsp-mode/page/lsp-rust-analyzer/#lsp-rust-analyzer-display-chaining-hints for a full list
    ;; (lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
    ;; (lsp-rust-analyzer-display-chaining-hints t)
    ;; (lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil)
    ;; (lsp-rust-analyzer-display-closure-return-type-hints t)
    ;; (lsp-rust-analyzer-display-parameter-hints nil)
    ;; (lsp-rust-analyzer-display-reborrow-hints nil)
    :config
    (add-hook 'lsp-mode-hook 'lsp-ui-mode))

  (use-package lsp-ui
    :commands lsp-ui-mode
    :custom
    (lsp-ui-peek-always-show t)
    (lsp-ui-sideline-show-hover t)
    (lsp-ui-doc-enable nil))

#+end_src

** Rust

Taken a lot from:

- [[https://robert.kra.hn/posts/rust-emacs-setup/]].

#+begin_src emacs-lisp

  (use-package rustic
    :bind
    (:map rustic-mode-map
          ("M-j" . lsp-ui-imenu)
          ("M-?" . lsp-find-references)
          ("C-c C-c l" . flycheck-list-errors)
          ("C-c C-c a" . lsp-execute-code-action)
          ("C-c C-c r" . lsp-rename)
          ("C-c C-c q" . lsp-workspace-restart)
          ("C-c C-c Q" . lsp-workspace-shutdown)
          ("C-c C-c s" . lsp-rust-analyzer-status))
    
    :custom
    (rustic-rustfmt-config-alist '((edition . "2021")))
    
    (lsp-eldoc-hook nil)
    (lsp-enable-symbol-highlighting nil)
    (lsp-signature-auto-activate nil)

    (rustic-format-on-save t))

#+end_src

** =yasnippet=

#+begin_src emacs-lisp

  (use-package yasnippet
    :hook
    (prog-mode . yas-minor-mode)
    (text-mode . yas-minor-mode)

    :custom
    (yas-snippet-dirs (list YAS_SNIPPET_DIR))

    :config
    (yas-reload-all))

#+end_src

** Company

#+begin_src emacs-lisp

  (use-package company
    :custom
    (company-idle-delay 0.5)
    ;; (company-begin-commands nil) ;; uncomment to disable popup
    :bind
    (:map company-active-map
          ("C-j". company-select-next)
          ("C-k". company-select-previous)
          ("C-h". company-select-first)
          ("C-l". company-select-last)))

#+end_src
