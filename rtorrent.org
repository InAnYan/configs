#+TITLE: =rtorrent= configuration
#+PROPERTY: header-args:conf :tangle ./export/rtorrent.rc

* Descirption

=rtorrent= configuration file. =rtorrent= is a torrent client application.

If you want to use this configuration, please adjust [[Instance layout (base paths)]].

* Code

** Instance layout (base paths)

#+begin_src conf

  method.insert = cfg.basedir,  private|const|string, "/mnt/data/torrents/internal-rtorrent/"
  method.insert = cfg.download, private|const|string, "/mnt/data/torrents/download/"
  method.insert = cfg.logs,     private|const|string, (cat,(cfg.basedir),"log/")
  method.insert = cfg.logfile,  private|const|string, (cat,(cfg.logs),"rtorrent-",(system.time),".log")
  method.insert = cfg.session,  private|const|string, (cat,(cfg.basedir),".session/")
  method.insert = cfg.watch,    private|const|string, "/mnt/data/torrents/watch/"

#+end_src

** Create instance directories

#+begin_src conf

  execute.throw = sh, -c, (cat,\
    "mkdir -p \"",(cfg.download),"\" ",\
    "\"",(cfg.logs),"\" ",\
    "\"",(cfg.session),"\" ",\
    "\"",(cfg.watch),"\" ")

#+end_src


** Listening port for income

/Incoming traffic/. Single port =50000= is used.

#+begin_src conf


#+end_src
  
** Tracker-less torrent

#+begin_src conf

  # Port range to use for listening. (port_range)
  network.port_range.set = 62820-62820

  # Enable/disable peer exchange for torrents that aren't marked private. Disabled by default. (peer_exchange)
  protocol.pex.set = 1

  # Set whether the client should try to connect to UDP trackers (It can cause various problems if it's enabled, if you experience any with this option enabled then disable it.)
  trackers.use_udp.set = 1

  # Enable DHT support for trackerless torrents or when all trackers are down. 
  # May be set to "disable" (completely disable DHT), "off" (do not start DHT),
  # "auto" (start and stop DHT as needed), or "on" (start DHT immediately).
  # The default is "off".
  # For DHT to work, a session directory must be defined.
  dht.mode.set = auto

  # UDP port to use for DHT
  dht.port.set = 62882

  # Adding public DHT servers for easy bootstrapping
  schedule2 = dht_node_1, 5, 0, "dht.add_node=router.utorrent.com:6881"
  schedule2 = dht_node_2, 5, 0, "dht.add_node=dht.transmissionbt.com:6881"
  schedule2 = dht_node_3, 5, 0, "dht.add_node=router.bitcomet.com:6881"
  schedule2 = dht_node_4, 5, 0, "dht.add_node=dht.aelitis.com:6881"

#+end_src
  
** Peer settings

#+begin_src conf

  throttle.max_uploads.set = 100
  throttle.max_uploads.global.set = 250

  throttle.min_peers.normal.set = 1
  throttle.max_peers.normal.set = 60
  throttle.min_peers.seed.set = 1
  throttle.max_peers.seed.set = 80
  trackers.numwant.set = 80

  protocol.encryption.set = allow_incoming,try_outgoing,enable_retry

#+end_src
  
** Network limits

#+begin_src conf

  network.http.max_open.set = 50
  network.max_open_files.set = 600
  network.max_open_sockets.set = 300
  
#+end_src
  
** Memory usage limits

#+begin_src conf

  pieces.memory.max.set = 1800M
  network.xmlrpc.size_limit.set = 4M

#+end_src

** Basic settings

/No need to change them/.

#+begin_src conf

  session.path.set = (cat, (cfg.session))
  directory.default.set = (cat, (cfg.download))
  log.execute = (cat, (cfg.logs), "execute.log")
  log.xmlrpc = (cat, (cfg.logs), "xmlrpc.log")
  execute.nothrow = sh, -c, (cat, "echo >",\
  (session.path), "rtorrent.pid", " ",(system.pid))

#+end_src

** Other operational settings

#+begin_src conf

  encoding.add = UTF-8
  system.umask.set = 0027
  system.cwd.set = (directory.default)
  network.http.dns_cache_timeout.set = 25
  schedule2 = monitor_diskspace, 15, 60, ((close_low_diskspace, 1000M))
  pieces.hash.on_completion.set = yes
  #view.sort_current = seeding, greater=d.ratio=
  #keys.layout.set = qwerty
  #network.http.capath.set = "/etc/ssl/certs"
  #network.http.ssl_verify_peer.set = 0
  #network.http.ssl_verify_host.set = 0

#+end_src

** Additional settings

#+begin_src conf

  method.insert = system.startup_time, value|const, (system.time)
  method.insert = d.data_path, simple,\
  "if=(d.is_multi_file),\
  (cat, (d.directory), /),\
  (cat, (d.directory), /, (d.name))"
  method.insert = d.session_file, simple, "cat=(session.path), (d.hash), .torrent"

#+end_src

** Watch directories

#+begin_src conf

  ## Add & download straight away
  schedule2 = watch_start, 10, 10, ((load.start_verbose, (cat, (cfg.watch), "*.torrent")))

#+end_src

** Background process  

#+begin_src conf

  #system.daemon.set = true
  #network.scgi.open_local = (cat,(session.path),rpc.socket)
  #execute.nothrow = chmod,770,(cat,(session.path),rpc.socket)

#+end_src

For Mentor:

#+begin_src conf

  #scgi_local = /mnt/data/torrents/internal-rtorrent/rtorrent.rpc
  #directory = /mnt/data/torrents/download
  #encoding.add = utf8

#+end_src

** Logging

#+begin_src conf

  ##   Levels = critical error warn notice info debug
  ##   Groups = connection_* dht_* peer_* rpc_* storage_* thread_* tracker_* torrent_*
  print = (cat, "Logging to ", (cfg.logfile))
  log.open_file = "log", (cfg.logfile)
  log.add_output = "info", "log"
  #log.add_output = "tracker_debug", "log"
  
#+end_src
